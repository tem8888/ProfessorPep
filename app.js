const Discord = require('discord.js');
const client = new Discord.Client();
const pool = require ('./clientpool.js'); 
var points_write = require ('./points.js');  
const config = require('./config.js');
const questions_amount = 120000;
const fs = require('fs');
client.commands = new Discord.Collection();
let quizLine; let question; let check; let timerId; let answer;
let hint; let len; let points; let total_points; let qNumber; let k;
let cmd; let firstAnswer;
pool.on('error', (err, client) => {
  console.error('Unexpected error on idle client', err)
  process.exit(-1)
})

/****************** –ó–∞–≥—Ä—É–∑–∫–∞ js —Ñ–∞–π–ª–æ–≤ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ ********************/
fs.readdir('./commands/', (err, files) => {
    if (err) console.log(err)

    let jsfiles = files.filter(f=>f.split('.').pop() === 'js')
    if(jsfiles.length <= 0) {
        console.log('–ù–µ—Ç –∫–æ–º–∞–Ω–¥'); 
        return;
   }

    jsfiles.forEach((f,i) => {
        let props = require('./commands/'+f);
        console.log(`${f} loaded`);
        client.commands.set(props.help.name, props)
       })
})


client.on('ready', () => {
  console.log(`Logged in as ${client.user.tag}!`);
  client.user.setActivity('–í–∏–∫—Ç–æ—Ä–∏–Ω—É');
  pool.connect( (err, client, done) => {
    if(err) throw err; 
            client.query('create table if not exists quiz( \
                id text primary key, \
                name text, \
                count integer default 0, \
                points integer default 0)', (err, result) => {
                    //disconnent from database on error
            });
            client.query('create table if not exists quiz_tournament( \
                id text primary key, \
                name text, \
                count integer default 0, \
                points integer default 0)', (err, result) => {
                    //disconnent from database on error
            });
            client.query('create table if not exists guild_settings( \
                id_guild text primary key, \
                id_channel text default 0, \
                time_to_hint integer default 4000)', (err, result) => {
                    //disconnent from database on error
            });
            });
  pool.connect(err => {
  if(err) throw err; 
  console.log('Connected to PostgresSQL'); });
 });

var stringSimilarity = require('string-similarity');
let fullData = fs.readFileSync(config.url_file, 'utf8').split('\n');
//---------------------
// CLIENT.ON MESSAGE =>
//---------------------
client.on("message", (message) => {

    if (message.author.bot) return
    if (message.channel.id != config.channel) return
    let messageArray = message.content.split(/\s+/g);
    let command = messageArray[0];
    let args = messageArray.slice(config.prefix.length)

  /****************** –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥ ********************/

    if (command.startsWith(config.prefix)) {
      cmd = client.commands.get(command.slice(config.prefix.length))
      if ((cmd) && (cmd.help.name == '—Å–ª–µ–¥') && (!timerId) ) {
          firstAnswer = true;
          timerId = true; 
          randm = Math.floor(Math.random() * (fullData.length-1)); // -1 –∏–∑-–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ —Ñ–∞–π–ª–µ
          quizLine = fullData[randm].split('|'); // —Å—Ç—Ä–æ–∫–∞-–º–∞—Å—Å–∏–≤ –≤–æ–ø—Ä–æ—Å|–æ—Ç–≤–µ—Ç
          question = quizLine[0]; // –≤–æ–ø—Ä–æ—Å
          answer = quizLine[1]; // –æ—Ç–≤–µ—Ç


          len = answer.length - 1;
message.channel.send(`\`\`\`fix
  ${question} | –ë—É–∫–≤ = ${len}\`\`\``);
    console.log('–æ—Ç–≤–µ—Ç= '+answer);
    var hintArray = []; // –º–∞—Å—Å–∏–≤ —Å–ª–æ–≤-–ø–æ–¥—Å–∫–∞–∑–æ–∫

    function get_line(filename, line_num, callback) {
        callback(null, quizLine); 
    }

    String.prototype.replaceAt=function(index, replacement) {
      return this.substr(0, index) + replacement+ this.substr(index + replacement.length);
    }

    get_line(config.url_file, randm, function(err, line) {   // –ø–æ–ª—É—á–∞–µ–º —Ä–∞–Ω–¥–æ–º–Ω—É—é —Å—Ç—Ä–æ–∫—É —Å–æ —Å–ª–æ–≤–æ–º –∏–∑ —Ñ–∞–π–ª–∞
      var hintWord = answer.replace(/([–ê-–Ø–Å–∞-—è—ëa-z0-9,.])/gi,'‚Ä¢'); // –∑–∞–º–µ—â–∞–µ–º –≤—Å–µ —Å–ª–æ–≤–æ –∑–≤–µ–∑–¥–æ—á–∫–∞–º–∏ *
      var id_index_array = []; // —Å–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –¥–ª—è —Ä–∞–Ω–¥–æ–º–Ω—ã—Ö –∫–ª—é—á–µ–π
// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ—Ç–∫—Ä—ã–≤–∞–µ–º—ã—Ö –±—É–∫–≤
      function generateRandom(min, max) { 
        var num = Math.floor(Math.random() * (max - min + 1)) + min;
        if (id_index_array.length != len) { // –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏, –µ—Å–ª–∏ –¥–ª–∏–Ω–∞ –º–∞—Å—Å–∏–≤–∞ —Ä–∞–≤–Ω–∞ –¥–ª–∏–Ω–µ —Å–ª–æ–≤–∞
          return (id_index_array.includes(num)) ? generateRandom(min, max) : num;
        }
      }
//–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª-–≤–æ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–ª–∏–Ω—ã —Å–ª–æ–≤–∞
      var hint_len = (len > 3 && len <= 8) ? 2 : (len > 8 && len <= 12) ? 3 : (len > 12 && len <= 15) ? 4 : (len > 16) ? 5 : 1; 
 
      for (i=0; i<len-hint_len; i++) { // —Ü–∏–∫–ª –¥–ª—è —Å–æ–±–∏—Ä–∞–Ω–∏—è –∏ –æ—Ç–∫—Ä—ã–≤–∞–Ω–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –±—É–∫–≤
          rand_index_2 = generateRandom(0, len-1); // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤
          id_index_array.push(rand_index_2); // –ø—É—à–∏–º –∏—Ö –≤ –º–∞—Å—Å–∏–≤
        if ((answer[rand_index_2] != ' ')) {
            hintWord = hintWord.replaceAt(rand_index_2, ""+answer[rand_index_2]+""); // –∑–∞–º–µ–Ω—è–µ–º –∑–≤–µ–∑–¥–æ—á–∫–∏ –Ω–∞ –±—É–∫–≤—ã
            hintArray.push(hintWord); // –ø—É—à–∏–º –ø–æ–æ—á–µ—Ä–µ–¥–Ω—ã–µ —Å–ª–æ–≤–∞ —Å –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –±—É–∫–≤–∞–º–∏ –≤ –º–∞—Å—Å–∏–≤
        }
      }
        var pod = hintArray;
    console.log(pod);
    //  pod = new_name_2;
      console.log('length='+len); 
      hint = 0;
/******************–í–´–í–û–î –ü–û–î–°–ö–ê–ó–û–ö****************/
      timerId = setInterval(async function next() {
          if (hintArray[hint]) {
            message.channel.send(`> –ü–æ–¥—Å–∫–∞–∑–∫–∞ ‚Ññ${hint+1}: ${hintArray[hint]}`);
            hint += 1;
          } else {
                clearInterval(timerId);
                timerId = false; 
                message.channel.send(`–°–ª–∞–±–∞–∫–∏, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${answer}\n–í—ã–±–∏—Ä–∞—é –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å...`);
           //   if (qNumber) k += 1; // –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        /*        setTimeout(async function(){ 
                    let next = await message.channel.send('!—Å—Ç–∞—Ä—Ç');
                    await next.delete();
                }, 2500); */
          }
        }, config.time_to_hint);
  });



   //       cmd.run(client, message, randm, quizLine, question, answer)
          
      }
      else if ((cmd) && (cmd.help.name != '—Å–ª–µ–¥')) cmd.run(client, message)
      else return
    }
        
/****************** –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–æ–≤ ********************/
    if (answer) {
        check = stringSimilarity.compareTwoStrings(message.content.toLowerCase(), answer.toLowerCase()); 
    }

/****************** –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –≤–µ—Ä–µ–Ω - –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–æ–¥—Å—á–µ—Ç –±–∞–ª–ª–æ–≤ ********************/
    if ((check == 1) && (message.author.bot == false) && (firstAnswer)) {
  //&& (!qNumber) –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞
        points_write.run(client, message, cmd, answer);
        clearInterval(timerId);
        timerId = false; 
        firstAnswer = false;
     /*   setTimeout(async function(){ 
            let next = await message.channel.send('!—Å—Ç–∞—Ä—Ç');
            await next.delete();
        }, 2500);*/
    }

});

client.on('guildMemberAdd', member => {
    const msg = member.guild.channels.get('370921566873059328');
    msg.send({embed:{
    color: 16777215,
    title: "–ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫!",
    url: "https://fmfan.ru",
    description: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <@" + member.user.id + ">! –î–ª—è –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ —é–Ω–∏–æ—Ä—Å–∫–∏–π —Å–æ—Å—Ç–∞–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å –∏ –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –æ–ø—ã—Ç –∏–≥—Ä—ã –≤ FM –≤ –æ–¥–∏–Ω–æ—á–Ω–æ–π –∏, –µ—Å–ª–∏ –µ—Å—Ç—å, —Å–µ—Ç–µ–≤–æ–π –∏–≥—Ä–µ. –ü—Ä–æ—Å—å–±–∞ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ —Å–µ—Ä–≤–µ—Ä–∞ –≤ –∫–∞–Ω–∞–ª–µ <#502769170400673792>",
    thumbnail: {
      "url": "https://media.giphy.com/media/d2r5afIHy34mWTM8r4/giphy.gif"
    },
    timestamp: new Date(),
    footer: {
      icon_url: client.user.avatarURL,
      text: "–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –ø—Ä–æ—Å—Ç–æ —Å–ø—Ä–æ—Å–∏—Ç–µ üôÇ"
    }
 }});
 });
client.login(process.env.BOT_TOKEN);
