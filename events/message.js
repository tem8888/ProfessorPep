//const active = new Map();
//const talkedRecently = new Set();
const config = require('../config.js')
const fs = require('fs')
const path = require('path')
const UserModel = require('../models/users.js')
const GuildModel = require('../models/guild.js')
const GetQuizLine = require('../functions/answer.js')
const GetHints = require('../functions/interval.js')
let stringSimilarity = require('string-similarity')
const next = require('../quiz/next.js')
let showCongrat = require('../quiz/points.js')
let showCongratTour = require('../quiz/points_tour.js')
const GetTop = require('../functions/top_tour.js')
let snekfetch = require('snekfetch')
const congrat = require('../quiz/congrat.js')
let firstAnswer
let questionInProgress = false
let check
let k = 0
let qNumber
let randCongrat

module.exports = async (client, msg) => {
  if (msg.guild === null) return // –†–µ–∞–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ DM

  /********** –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 1 –µ—Å–ª–∏ –æ–Ω —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º ********/
  if (typeof quizLine !== 'undefined' && questionInProgress) {
    // –°—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è QuizLine?
    check = stringSimilarity.compareTwoStrings(
      msg.content.toLowerCase(),
      answer.toLowerCase()
    )
  }

  /****************** –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –≤–µ—Ä–µ–Ω - –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–æ–¥—Å—á–µ—Ç –±–∞–ª–ª–æ–≤ ********************/
  if (check == 1 && firstAnswer) {
    // –¢–£–†–ù–ò–†–ù–´–ô –†–ï–ñ–ò–ú
    if (qNumber) {
      GetHints.interval() // –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø–æ—è–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
      showCongratTour.run(client, msg, answer, hint).then(() => {
        if (k < qNumber) msg.channel.send('–í—ã–±–∏—Ä–∞—é –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å...')
      })

      firstAnswer = false
      k += 1

      if (k >= qNumber)
        return GetTop.top(msg).then(() => {
          // –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å —Ç—É—Ä–Ω–∏—Ä–∞, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
          questionInProgress = false
        })

      setTimeout(async function () {
        firstAnswer = true
        GetQuizLine.getLine() // –ò–∑ answer.js –ø–æ–ª—É—á–∞—é –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏, –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç

        next
          .run(client, msg, question, answer, qNumber, k)
          .then(async (hintArray) => {
            await GetHints.interval(msg, hintArray, qNumber).then(async () => {
              // –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –Ω–µ –±—ã–ª –¥–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
              msg.channel.send(
                `${congrat.noAnswer[`${randCongrat}`]} **${answer}**`
              )
              ;(qNumber = 0), (k = 0) // –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º –≤–æ–ø—Ä–æ—Å–µ –æ—Ç–∫–ª—é—á–∞–µ–º —Ç—É—Ä–Ω–∏—Ä
              GetTop.top(msg)
              questionInProgress = false
            })
          })
          .catch((err) => console.log(err))
      }, 4000)
      return
    }

    // –û–ë–´–ß–ù–´–ô –†–ï–ñ–ò–ú
    GetHints.interval() // –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø–æ—è–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    showCongrat.run(client, msg, answer, hint)
    firstAnswer = false

    setTimeout(async function () {
      firstAnswer = true
      GetQuizLine.getLine() // –ò–∑ answer.js –ø–æ–ª—É—á–∞—é –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏, –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç

      next
        .run(client, msg, question, answer)
        .then(async (hintArray) => {
          await GetHints.interval(msg, hintArray).then(async () => {
            // –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –Ω–µ –±—ã–ª –¥–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            msg.channel.send(
              `${congrat.noAnswer[`${randCongrat}`]} **${answer}**`
            )
            let noAnswerVote = await msg.channel.send(`_ _\n–ì–æ –¥–∞–ª—å—à–µ?`)
            await noAnswerVote.react('üÜó')
            questionInProgress = false
          })
        })
        .catch((err) => console.log(err))
    }, 4000)
  }

  GuildModel.findOne({ idGuild: msg.guild.id })
    .then(async (guild) => {
      let prefix = guild.prefix

      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞
      if (msg.content.indexOf(prefix) !== 0) return

      let checkBotStart = stringSimilarity.compareTwoStrings(
        msg.content,
        `${prefix}—Å—Ç–∞—Ä—Ç`
      )
      if (msg.author.bot && checkBotStart !== 1) return // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ä—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
      if (msg.author.bot && checkBotStart === 1) questionInProgress = false

      // –ö–æ–º–∞–Ω–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã —Ä–∞–±–æ—Ç–∞—é—â–∏–µ –≤–æ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–∞—Ö
      let content = msg.content.split(' ')
      let command = content[0]
      let args = content.slice(1)

      if (command.startsWith(prefix)) {
        let commandfile = client.commands.get(command.slice(prefix.length))
        if (commandfile)
          commandfile.run(client, msg, args).then((qNum) => {
            if (Number.isInteger(Number(qNum))) {
              if (Number(qNum === 0)) k = 0
              qNumber = qNum
              return
            }
          })
      }

      if (msg.channel.id != guild.channelId) {
        if (guild.channelId) {
          msg.channel.send(
            `–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ <#${guild.channelId}>.`
          )
        } else {
          msg.channel.send(
            `–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É [${prefix}]channel ID_–∫–∞–Ω–∞–ª–∞. (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)`
          )
        }
        return
      }

      if (msg.content === `${prefix}—Å—Ç–∞—Ä—Ç` && !questionInProgress) {
        randCongrat = Math.floor(Math.random() * 5) + 1
        questionInProgress = true
        firstAnswer = true

        GetQuizLine.getLine() // –ò–∑ answer.js –ø–æ–ª—É—á–∞—é –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏, –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç

        next
          .run(client, msg, question, answer, qNumber, k)
          .then(async (hintArray) => {
            await GetHints.interval(msg, hintArray, qNumber).then(
              async (qcount) => {
                // –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –Ω–µ –±—ã–ª –¥–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç

                if (!qNumber) {
                  // –µ—Å–ª–∏ —Ç—É—Ä–Ω–∏—Ä–∞ –Ω–µ—Ç –∏ –æ—Ç–≤–µ—Ç –Ω–µ —É–≥–∞–¥–∞–Ω
                  msg.channel.send(
                    `${congrat.noAnswer[`${randCongrat}`]} **${answer}**`
                  )
                  let noAnswerVote = await msg.channel.send(`–ì–æ –¥–∞–ª—å—à–µ?`)
                  await noAnswerVote.react('üÜó')
                  k = 0
                } else {
                  // –µ—Å–ª–∏ —Ç—É—Ä–Ω–∏—Ä –µ—Å—Ç—å –∏ –æ—Ç–≤–µ—Ç –Ω–µ —É–≥–∞–¥–∞–Ω
                  k += qcount
                  msg.channel.send(
                    `${congrat.noAnswer[`${randCongrat}`]} **${answer}**`
                  )
                  if (k < qNumber) {
                    // –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å –≤ —Ç—É—Ä–Ω–∏—Ä–µ
                    msg.channel.send(`–í—ã–±–∏—Ä–∞—é –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å üôá‚Äç‚ôÇÔ∏è`)
                    setTimeout(async function () {
                      let skipNext = await msg.channel.send('!—Å—Ç–∞—Ä—Ç')
                      await skipNext.delete()
                    }, 4000)
                  } else {
                    ;(qNumber = 0), (k = 0) // –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º –≤–æ–ø—Ä–æ—Å–µ –æ—Ç–∫–ª—é—á–∞–µ–º —Ç—É—Ä–Ω–∏—Ä
                    GetTop.top(msg)
                  }
                }
                questionInProgress = false
              }
            )
          })
          .catch((err) => console.log(err))
      }

      if (msg.content.startsWith(`${prefix}–æ–±–Ω—É–ª–∏—Ç—å`)) {
        if (!msg.member.hasPermission('MANAGE_GUILD'))
          return msg.channel.send('–≠—Ç–æ –º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω —Å–µ—Ä–≤–µ—Ä–∞.')
        UserModel.updateMany({ idUserGuild: msg.guild.id }, { points: 0 }).then(
          () => {
            msg.channel.send('–û—á–∫–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –æ–±–Ω—É–ª–µ–Ω—ã.')
          }
        )
      }
      if (msg.content.startsWith(`${prefix}upl`)) {
        let txt_url = ''
        let Attachment = msg.attachments.array()
        if (Attachment != '') txt_url = Attachment[0].url
        // msg.delete();

        if (txt_url !== '' && txt_url.slice(-3) === 'txt')
          snekfetch.get(txt_url).then(async (r) => {
            fullData = r.body.toString().split(`\n`)
            msg.channel.send(
              `–ó–∞–≥—Ä—É–∂–µ–Ω —Å–ø–∏—Å–æ–∫ –∏–∑ **${fullData.length}** –≤–æ–ø—Ä–æ—Å–æ–≤`
            )
          })
      }
      if (msg.content.startsWith(`${prefix}default`)) {
        fullData = fs
          .readFileSync(path.join(__dirname, '../new-file.txt'), 'utf8')
          .split('\n')
        msg.channel.send(
          `–ó–∞–≥—Ä—É–∂–µ–Ω –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑ **${fullData.length}** –≤–æ–ø—Ä–æ—Å–æ–≤`
        )
      }
    })
    .catch((err) => console.log(err))
}
